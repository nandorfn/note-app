
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// model AuthProfile {
//   id           Int      @id @default(autoincrement())
//   userId       Int
//   user         User     @relation(fields: [userId], references: [id])
//   provider     String   // E.g., "google", "facebook", "github"
//   providerId   String   // Unique ID provided by the authentication provider
//   providerType String   // E.g., "oauth", "email", etc.
//   email        String?  // Email associated with the authentication session
//   name         String?  // User's name from the authentication session
//   image        String?  // Profile image URL from the authentication session
// }

// model User {
//   id          Int       @id @default(autoincrement())
//   username    String    @unique
//   email       String    @unique
//   image       String?
//   name        String?
//   notes       Note[]
//   todos       Todo[]
//   trashed     Trash[]
//   authProfiles AuthProfile[]
// }

model Note {
  id        Int    @id @default(autoincrement())
  title     String
  content   String
  color     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // userId    Int
  // user      User   @relation(fields: [userId], references: [id])
}

enum TaskStatus {
  PENDING
  COMPLETED
}
model Task {
  id            Int         @id @default(autoincrement())
  title         String
  deadline      DateTime?
  status        TaskStatus
  startTime     DateTime?
  endTime       DateTime?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}
enum TaskScheduleEnum {
  TODAY
  TOMORROW
  UPCOMING
}
